.#  ===========================================================================
.#  Generate constants
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#      * sdds_feature_config.h - Configuration for features based on sdds.xml
.#      * sdds_features.h - Enabled/Disabled sDDS features
.#      * sdds_network.h - Platform network configuration
.#  ===========================================================================
.#
.#  Generate sDDS features configuration
.#
.echo "Generating sdds_features_config.h ..."
.output "sdds_features_config.h"
.for project.define
.   if defined (define.value)
#ifndef $(define.name:)
#define $(define.name:) $(define.value:)
#endif
.   else
#ifndef $(define.name:)
#define $(define.name:)
#endif
.   endif
.endfor
.close
.#
.#  Generate sDDS feature constants
.#
.echo "Generating sdds_features.h ..."
.output "sdds_features.h"
/*
$(project.GENERATED_WARNING_HEADER:)
*/
#ifndef $(PROJECT.NAME)_SDDS_FEATURES_H_INCLUDED
#define $(PROJECT.NAME)_SDDS_FEATURES_H_INCLUDED

#include "sdds_features_config.h"

#define SDDS_LOCAL_BYTEORDER_$(PROJECT.ENDIAN)_ENDIAN
#define SDDS_NET_VERSION 0x01

.SDDS_BUILTIN_TOPICS_COUNT=5

#ifndef SDDS_QOS_RELIABILITY_RELIABLE_SUBS_WITHOUT_PUBS
#   define SDDS_QOS_RELIABILITY_RELIABLE_SUBS_WITHOUT_PUBS 0
#endif

#ifdef FEATURE_SDDS_BUILTIN_TOPICS_ENABLED
#define SDDS_MAX_DATA_WRITERS ($(count (project.role, role.type = "publisher") + SDDS_BUILTIN_TOPICS_COUNT) + SDDS_QOS_RELIABILITY_RELIABLE_SUBS_WITHOUT_PUBS)
#undef SDDS_DATA_READER_MAX_OBJS
#define SDDS_DATA_READER_MAX_OBJS $(count (project.role, role.type = "subscriber") + SDDS_BUILTIN_TOPICS_COUNT)
#else
#define SDDS_MAX_DATA_WRITERS ($(count (project.role, role.type = "publisher")) + SDDS_QOS_RELIABILITY_RELIABLE_SUBS_WITHOUT_PUBS)
#undef SDDS_DATA_READER_MAX_OBJS
#define SDDS_DATA_READER_MAX_OBJS $(count (project.role, role.type = "subscriber"))
#endif

#ifndef SDDS_MAX_LINKED_LIST_NODES
#define SDDS_MAX_LINKED_LIST_NODES 20
#endif /* SDDS_MAX_LINKED_LIST_NODES */

#ifndef SDDS_NET_MAX_OUT_QUEUE
#define SDDS_NET_MAX_OUT_QUEUE 2
#endif /*SDDS_NET_MAX_OUT_QUEUE */


#ifndef SDDS_NET_MAX_BUF_SIZE
#define SDDS_NET_MAX_BUF_SIZE 128
#endif /* SDDS_NET_MAX_BUF_SIZE */

#ifndef SDDS_NET_MAX_LOCATOR_COUNT
#define SDDS_NET_MAX_LOCATOR_COUNT 25
#endif /* SDDS_NET_MAX_LOCATOR_COUNT */

#ifndef SDDS_QOS_HISTORY_DEPTH
#define SDDS_QOS_HISTORY_DEPTH 20
#endif

#define SDDS_QOS_DW1_LATBUD 100
#define SDDS_QOS_DW2_LATBUD 500

.if count (project.role, role.type = "subscriber")
#define SDDS_TOPIC_HAS_PUB
.endif
.if count (project.role, role.type = "publisher")
#define SDDS_TOPIC_HAS_SUB
.endif

#ifdef SDDS_HAS_QOS_RELIABILITY
.if project.qos_reliability_has_kind_besteffort = 1
#   define SDDS_HAS_QOS_RELIABILITY_KIND_BESTEFFORT
.endif
.if project.qos_reliability_has_kind_reliableAck = 1
#   define SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK
.endif
.if project.qos_reliability_has_kind_reliableNack = 1
#   define SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_NACK
.endif
.if project.qos_reliability_biggest_seqNr_bitsize = 4
#   define SDDS_SEQNR_BIGGEST_TYPE uint8_t
#   define SDDS_SEQNR_BIGGEST_TYPE_BITSIZE 4
.   elsif project.qos_reliability_biggest_seqNr_bitsize = 8
#   define SDDS_SEQNR_BIGGEST_TYPE uint16_t
#   define SDDS_SEQNR_BIGGEST_TYPE_BITSIZE 16
.   else
#   define SDDS_SEQNR_BIGGEST_TYPE uint32_t
#   define SDDS_SEQNR_BIGGEST_TYPE_BITSIZE 32
.endif
.if project.qos_reliability_biggest_max_blocking_time < 255
#   define SDDS_MAX_BLOCKING_TIME_BIGGEST_TYPE uint8_t
.elsif project.qos_reliability_biggest_max_blocking_time < 65535
#   define SDDS_MAX_BLOCKING_TIME_BIGGEST_TYPE uint16_t
.else
#   define SDDS_MAX_BLOCKING_TIME_BIGGEST_TYPE uint32_t
.endif
#endif

#ifndef SDDS_TOPIC_APP_MSG_COUNT
#define SDDS_TOPIC_APP_MSG_COUNT 5
#endif /* SDDS_TOPIC_APP_MSG_COUNT */

#ifdef FEATURE_SDDS_BUILTIN_TOPICS_ENABLED
#define SDDS_TOPIC_MAX_COUNT $(count (project.topic) + SDDS_BUILTIN_TOPICS_COUNT)
#else
#define SDDS_TOPIC_MAX_COUNT $(count (project.topic))
#endif

#define SDDS_MNG_WORKER_CYCLE_TIME 10000
#define SDDS_MNG_BUILTINT_PUBCYCLE_PRESCALER 2

.if count (project.topic) > 15
#define SDDS_EXTENDED_TOPIC_SUPPORT
.endif

#endif /* $(PROJECT.NAME)_SDDS_FEATURES_H_INCLUDED */
.close
.#
.#  Generate sDDS network constants
.#
.echo "Generating sdds_network.h ..."
.output "sdds_network.h"
/*
$(project.GENERATED_WARNING_HEADER:)
*/
#ifndef $(PROJECT.NAME)_SDDS_NETWORK_H_INCLUDED
#define $(PROJECT.NAME)_SDDS_NETWORK_H_INCLUDED
/* Network settings */
#ifndef PLATFORM_$(PROJECT.OS)_SDDS_IFACE
#   define PLATFORM_$(PROJECT.OS)_SDDS_IFACE       "$(project.iface)"
#endif
#ifndef PLATFORM_$(PROJECT.OS)_SDDS_IP_ADDRESS
#   define PLATFORM_$(PROJECT.OS)_SDDS_IP_ADDRESS 			"$(project.ip)"
#endif
#ifndef PLATFORM_$(PROJECT.OS)_SDDS_ADDRESS
.if project.iface > 0 & string.prefixed(project.ip, "fe80")
#   define PLATFORM_$(PROJECT.OS)_SDDS_ADDRESS		PLATFORM_$(PROJECT.OS)_SDDS_IP_ADDRESS"%"PLATFORM_$(PROJECT.OS)_SDDS_IFACE
.else
#   define PLATFORM_$(PROJECT.OS)_SDDS_ADDRESS		PLATFORM_$(PROJECT.OS)_SDDS_IP_ADDRESS
.endif
#endif

#ifndef PLATFORM_$(PROJECT.OS)_SDDS_DEVICE
.if defined (project.device)
#   define PLATFORM_$(PROJECT.OS)_SDDS_DEVICE		"$(project.device)"
.else
#   define PLATFORM_$(PROJECT.OS)_SDDS_DEVICE		PLATFORM_$(PROJECT.OS)_SDDS_IFACE
.endif
#endif

.if project.os = "linux" | project.os = "autobest"
#ifndef PLATFORM_$(PROJECT.OS:c)_SDDS_PROTOCOL
#   define PLATFORM_$(PROJECT.OS:c)_SDDS_PROTOCOL			$((project.protocol):upper)
#endif
.endif
.if project.os = "contiki"
#ifndef SDDS_CONTIKIPORT
#   define SDDS_CONTIKIPORT                 				$(project.port)
#endif
.else
#ifndef PLATFORM_$(PROJECT.OS)_SDDS_PORT
#   define PLATFORM_$(PROJECT.OS)_SDDS_PORT				$(project.port)
#endif
.endif


#endif /* $(PROJECT.NAME)_SDDS_NETWORK_H_INCLUDED */
/*
$(project.GENERATED_WARNING_HEADER:)
*/
.close
