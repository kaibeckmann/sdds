.#  ===========================================================================
.#  Generate linux implementation
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#      * sdds linux implementation
.#  ===========================================================================
.#
.#  Generate sDDS implementation header
.#
.echo "Generating $(project.name)_sdds_impl.h ..."
.output "$(project.name)_sdds_impl.h"
/*  =========================================================================
    $(project.name:) - $(project.description:)

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

$(project.GENERATED_WARNING_HEADER:)
    =========================================================================
*/
#ifndef $(PROJECT.NAME)_SDDS_IMPL_H_INC
#define $(PROJECT.NAME)_SDDS_IMPL_H_INC

.for project->domain.topic
#include "$(topic.c_name)-ds.h"
.endfor

#include <dds/DDS_DCPS.h>

.for project->domain.topic
extern DDS_DataReader g_$(topic.c_name:)_reader;
extern DDS_DataWriter g_$(topic.c_name:)_writer;
extern DDS_Topic g_$(topic.c_name:)_topic;

.endfor
#endif
/*
$(project.GENERATED_WARNING_HEADER:)
*/
.close
.#
.#  Generate sDDS implementation source
.#
.echo "Generating $(project.name)_sdds_impl.c ..."
.output "$(project.name)_sdds_impl.c"
/*  =========================================================================
    $(project.name:) - $(project.description:)

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

$(project.GENERATED_WARNING_HEADER:)
    =========================================================================
*/
#include "$(project.name)_sdds_impl.h"
#include "gen_constants.h"

#include <os-ssal/Memory.h>
#include <os-ssal/NodeConfig.h>
#include <sdds/DataSink.h>
#include <sdds/DataSource.h>
#include <sdds/LocatorDB.h>
#include <sdds/Log.h>
#include <sdds/Network.h>
#include <sdds/sDDS.h>
#ifdef FEATURE_SDDS_DISCOVERY_ENABLED
#include <sdds/Discovery.h>
#endif
#ifdef FEATURE_SDDS_BUILTIN_TOPICS_ENABLED
#include <sdds/BuiltinTopic.h>
#endif

DDS_ReturnCode_t DDS_DataReader_set_listener(
	DDS_DataReader _this,
	const struct DDS_DataReaderListener* a_listener,
	const DDS_StatusMask mask
)
{
	rc_t ret = DataSink_set_on_data_avail_listener((DataReader) _this, (On_Data_Avail_Listener) a_listener->on_data_available, (const StatusMask) mask);
	if (ret == SDDS_RT_OK)
		return DDS_RETCODE_OK;

	return DDS_RETCODE_ERROR;
}

.for project->domain.topic
DDS_Topic g_$(topic.c_name:)_topic;
$(topic.c_name:) g_$(topic.c_name:)_pool[SDDS_TOPIC_APP_MSG_COUNT];
.   if count (project.role, role.topic = topic.name & role.type = "subscriber")
DDS_DataReader g_$(topic.c_name:)_reader;
.   endif
.   if count (project.role, role.topic = topic.name & role.type = "publisher")
DDS_DataWriter g_$(topic.c_name:)_writer;
.   endif

.endfor
rc_t sDDS_init(void)
{
	rc_t ret;

	Memory_init();
	LocatorDB_init();
	DataSource_init();
	DataSink_init();
	Network_init();
#ifdef FEATURE_SDDS_BUILTIN_TOPICS_ENABLED
	BuiltinTopic_init();
#endif
#ifdef FEATURE_SDDS_DISCOVERY_ENABLED
	Discovery_init();
#endif

    int log_level = 3;

	Log_setLvl(log_level);

	Locator l;
.for project->domain.topic
    g_$(topic.c_name:)_topic = sDDS_$(topic.c_name:)Topic_create(g_$(topic.c_name:)_pool, SDDS_TOPIC_APP_MSG_COUNT);
.   if count (project.role, role.topic = topic.name & role.type = "subscriber")
    g_$(topic.c_name:)_reader = DataSink_create_datareader(g_$(topic.c_name:)_topic, NULL, NULL /*&sdds_listener*/, NULL);
.   endif
.   if count (project.role, role.topic = topic.name & role.type = "publisher")
    g_$(topic.c_name:)_writer = DataSource_create_datawriter(g_$(topic.c_name:)_topic, NULL, NULL, NULL);
.   endif

.   for project.role where topic.name = role.topic
.       for role.subscriber
    ret = LocatorDB_newLocator(&l);
    if (ret != SDDS_RT_OK)
        return ret;

    Locator_upRef(l);

    ret = Network_setAddressToLocator(l, "$(subscriber.ip)");
    if (ret != SDDS_RT_OK)
        return ret;

    ret = Topic_addRemoteDataSink(g_$(topic.c_name:)_topic, l);
    if (ret != SDDS_RT_OK)
        return ret;
    Locator_downRef(l);
.       endfor
.   endfor
.endfor

	return SDDS_RT_OK;
}
/*
$(project.GENERATED_WARNING_HEADER:)
*/
.close
