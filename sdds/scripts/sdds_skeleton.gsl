.#  ===========================================================================
.#  Generates skeleton for new examples
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#      * $(project.name).c
.#  ===========================================================================
.template 0
project.lorem_ipsum = "\
Es gibt im Moment in diese Mannschaft, oh, einige Spieler vergessen ihnen Profi was sie sind. Ich lese nicht sehr viele Zeitungen, aber ich habe gehört viele Situationen. Erstens: wir haben nicht offensiv gespielt. Es gibt keine deutsche Mannschaft spielt offensiv und die Name offensiv wie Bayern. Letzte Spiel hatten wir in Platz drei Spitzen: Elber, Jancka und dann Zickler. Wir müssen nicht vergessen Zickler. Zickler ist eine Spitzen mehr, Mehmet eh mehr Basler. Ist klar diese Wörter, ist möglich verstehen, was ich hab gesagt? Danke. Offensiv, offensiv ist wie machen wir in Platz. Zweitens: ich habe erklärt mit diese zwei Spieler: nach Dortmund brauchen vielleicht Halbzeit Pause. Ich habe auch andere Mannschaften gesehen in Europa nach diese Mittwoch. Ich habe gesehen auch zwei Tage die Training. Ein Trainer ist nicht ein Idiot! Ein Trainer sei sehen was passieren in Platz. In diese Spiel es waren zwei, drei diese Spieler waren schwach wie eine Flasche leer! Haben Sie gesehen Mittwoch"
.endtemplate
.if !file.exists ("$(project.name:c).c")
.   output "$(project.name:c).c"
.   if project.os = "contiki"
#include "contiki.h"
#include "$(project.name:c)_sdds_impl.h"

PROCESS($(project.name:c), "$(string.trim (project.?""):left)");
AUTOSTART_PROCESSES(&$(project.name:c));

PROCESS_THREAD($(project.name:c), ev, data)
{
	static struct etimer g_wait_timer;

	PROCESS_BEGIN();

.   elsif project.os = "linux"
#include <unistd.h>
#include "$(project.name:c)_sdds_impl.h"

int main()
{
.   endif
	DDS_ReturnCode_t ret;

	if (sDDS_init() == SDDS_RT_FAIL) {
		return 1;
	}
	Log_setLvl(0);

.       for project.role
.           for project.topic where role.topic = topic.name
.               if role.type = "publisher"
    $(topic.c_name:) $(topic.c_name:c)_pub;
.               for topic.attribute
.                   if attribute.type = "DDS_short" \
                     | attribute.type = "DDS_long" \
                     | attribute.type = "DDS_long_long" \
                     | attribute.type = "DDS_unsigned_short" \
                     | attribute.type = "DDS_unsigned_long" \
                     | attribute.type = "DDS_unsigned_long_long" \
                     | attribute.type = "DDS_octet"
    $(topic.c_name:c)_pub.$(attribute.name:c) = 1;
.                   elsif attribute.type = "DDS_boolean"
    $(topic.c_name:c)_pub.$(attribute.name:c) = true;
.                   elsif  attribute.type = "DDS_char"
.                       if attribute.enc_type = "string"
    strncpy ($(topic.c_name:c)_pub.$(attribute.name:c), \
        "$(string.substr (project.lorem_ipsum, 0, attribute.size - 1))", $(attribute.size));
.                       else
    $(topic.c_name:c)_pub.$(attribute.name:c) = 'H';
.                       endif
.                   endif
.               endfor
.               elsif role.type = "subscriber"
    $(topic.c_name:) $(topic.c_name:c)_sub;
    $(topic.c_name:) *$(topic.c_name:c)_sub_p = &$(topic.c_name:c)_sub;
.               endif
.           endfor
.       endfor

    for (;;) {
.       for project.role
.           for project.topic where role.topic = topic.name
.              if role.type = "publisher"
        ret = DDS_$(topic.c_name:)DataWriter_write (g_$(topic.c_name:)_writer, &$(topic.c_name:c)_pub, NULL);
        if (ret != DDS_RETCODE_OK)
            printf ("Failed to send topic $(topic.name)\\n");
.           elsif role.type = "subscriber"
        ret = DDS_$(topic.c_name:)DataReader_take_next_sample(g_$(topic.c_name:)_reader,
                &$(topic.c_name:c)_sub_p, NULL);
        if (ret == DDS_RETCODE_NO_DATA) {
            printf("no data for $(topic.name)\\n");
        }
        else {
            printf("Received a sample from topic '$(topic.name)': {\\n"
.               for topic.attribute
                   "   $(attribute.name:) => %$(attribute.print_type:)\\n"
.               endfor
                   "}\\n"
.               for topic.attribute
.                   if ! last()
                   , $(topic.c_name:c)_sub_p->$(attribute.name:c)
.                   else
                   , $(topic.c_name:c)_sub_p->$(attribute.name:c));
.                   endif
.               endfor
        }
.           endif

.       endfor
.   endfor
.   if project.os = "contiki"
		etimer_set(&g_wait_timer, 10 * CLOCK_SECOND);
		PROCESS_YIELD_UNTIL(etimer_expired(&g_wait_timer));
    }

    PROCESS_END();
}
.   elsif project.os = "linux"
        sleep (1);
    }

    return 0;
}
.   endif
.   close
.endif
