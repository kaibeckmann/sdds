.#  ===========================================================================
.#  Generate riot os makefile
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#      * Makefile
.#   
.#  ===========================================================================
.#
.#  Generate riot Makefile
.#
.echo "Generating Makefile ..."
.output "Makefile"

# name of your application
APPLICATION = $(project.name)

# If no BOARD is found in the environment, use this default:
.if defined (project.board)
BOARD ?= $(project.board:)
.else
BOARD ?= samr21-xpro
.endif

.if defined (project.RIOTBOARDPATH)
RIOTBOARD ?= $(project.RIOTBOARDPATH:)
.endif

SDDS_TOPDIR ?= \$(shell dirname \$(shell dirname \$(shell readlink generate.sh)))

# This has to be the absolute path to the RIOT base directory:
RIOTBASE ?= \$(SDDS_TOPDIR)/../platform/riot/

.for project.riot
.   for riot.module
USEMODULE += $(module.name:)
.   endfor
.   for riot.cflag
CFLAGS += $(cflag.name:)
.   endfor
.endfor

SDDS_OBJDIR ?= \$(CURDIR)/obj
SDDS_PLATFORM ?= riot
SDDS_ARCH ?= ARM
SDDS_CONSTANTS_FILE :=   sdds_features_config.h   sdds_features.h   sdds_network.h   sdds_profile.h
SDDS_APPDIR ?= \$(CURDIR)

export SDDS_TOPDIR
export SDDS_OBJDIR
export SDDS_PLATFORM
export SDDS_ARCH
export SDDS_CONSTANTS_FILE
export SDDS_APPDIR
export RIOTBASE
export BOARD

# Uncomment these lines if you want to use platform support from external
# repositories:
#RIOTCPU ?= \$(CURDIR)/../../RIOT/thirdparty_cpu
#RIOTBOARD ?= \$(CURDIR)/../../RIOT/thirdparty_boards

# Uncomment this to enable scheduler statistics for ps:
#CFLAGS += -DSCHEDSTATISTICS

# If you want to use native with valgrind, you should recompile native
# with the target all-valgrind instead of all:
# make -B clean all-valgrind

# Comment this out to disable code in RIOT that does safety checking
# which is not needed in a production environment but helps in the
# development process:
CFLAGS += -DDEVELHELP

# Change this to 0 show compiler invocation lines by default:
QUIET ?= 0

#USEMODULE += shell
#USEMODULE += shell_commands
USEMODULE += ps
USEMODULE += xtimer
USEMODULE += config
USEMODULE += gnrc_netdev_default
USEMODULE += auto_init_gnrc_netif
# Specify the mandatory networking modules for IPv6 and UDP
USEMODULE += gnrc_ipv6
USEMODULE += gnrc_ipv6_router_default
USEMODULE += gnrc_udp
# Add a routing protocol
USEMODULE += gnrc_rpl
USEMODULE += gnrc_conn_udp
USEMODULE += gnrc_icmpv6_echo
USEMODULE += sema

USEMODULE += gnrc_ndp
# Use minimal standard PRNG
USEMODULE += prng_minstd

CFLAGS += -DGNRC_IPV6_NETIF_ADDR_NUMOF=12

FEATURES_OPTIONAL += transceiver
FEATURES_OPTIONAL += config
FEATURES_OPTIONAL += periph_rtc

ifneq (,\$(filter msb-430,\$(BOARD)))
	USEMODULE += sht11
endif
ifneq (,\$(filter msba2,\$(BOARD)))
	USEMODULE += sht11
#	USEMODULE += ltc4150
	USEMODULE += mci
	USEMODULE += random
endif
ifneq (,\$(filter native,\$(BOARD)))
	USEMODULE += ltc4150
	USEMODULE += random
endif
ifneq (,\$(filter iot-lab_M3,\$(BOARD)))
	USEMODULE += isl29020
	USEMODULE += lps331ap
	USEMODULE += l3g4200d
	USEMODULE += lsm303dlhc
endif
ifneq (,\$(filter fox,\$(BOARD)))
    USEMODULE += lps331ap
    USEMODULE += l3g4200d
	USEMODULE += lsm303dlhc
endif

include \$(SDDS_TOPDIR)/sdds.mk


# depended/ generated objects
.for project.topic
DATA_DEPEND_OBJS += \$(SDDS_OBJDIR)/$(topic.c_name)-ds.o
.endfor
IMPL_DEPEND_OBJS = \$(SDDS_OBJDIR)/$(project.name)_sdds_impl.o

# driver
# DRIVER_DEPEND_OBJS += \$(SDDS_OBJDIR)/sdds-driver-\$(SDDS_ARCH)-LED.o

DATA_DEPEND_SRCS += \$(patsubst \$(SDDS_OBJDIR)/%.o,%.c,\$(DATA_DEPEND_OBJS))
DATA_DEPEND_SRCS += \$(patsubst \$(SDDS_OBJDIR)/%.o,%.h,\$(DATA_DEPEND_OBJS))

IMPL_DEPEND_SRCS += \$(patsubst \$(SDDS_OBJDIR)/%.o,%.c,\$(IMPL_DEPEND_OBJS))
IMPL_DEPEND_SRCS += \$(patsubst \$(SDDS_OBJDIR)/%.o,%.h,\$(IMPL_DEPEND_OBJS))

\$(SDDS_OBJS): \$(IMPL_DEPEND_SRCS) \$(DATA_DEPEND_SRCS) \$(SDDS_CONSTANTS_FILE) \$(SDDS_OBJDIR)

%-ds.c %-ds.h %_sdds_impl.c %_sdds_impl.h:
	\$(shell ./generate.sh)

\$(LOCAL_CONSTANTS):
	touch \$(LOCAL_CONSTANTS)

\$(SDDS_OBJDIR):
	mkdir \$(SDDS_OBJDIR)

clean2:
	rm \$(DATA_DEPEND_SRCS)
	rm \$(IMPL_DEPEND_SRCS)
	rm \$(SDDS_CONSTANTS_FILE)
	rm \$(SDDS_OBJDIR)/*

INCLUDES += -I \$(RIOTBASE)/core/include/
INCLUDES += -I \$(RIOTBASE)/sys/include/
CFLAGS += \$(INCLUDES)
CFLAGS += -DTHREAD_STACKSIZE_DEFAULT=1024

APPDEPS += \$(SDDS_OBJS)
include \$(RIOTBASE)/Makefile.include
CFLAGS += -Wno-error=strict-prototypes -Wno-error=old-style-definition -Wno-error
