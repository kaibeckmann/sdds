.#  ===========================================================================
.#  Generate topic data structures
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#      * ds (source|header)
.#  ===========================================================================
.#
.template 0

.#
.#  Counts the bits of a number
.#
function count_bits (value)
    bits = 0
#    bits = math.log (my.value)
#    bits = math . log10 (value) / math.log10 (2)
#    bits = math . ceil (bits)
    tmp = math.pow (2, bits)
    while tmp <= value
        bits += 1
        tmp = math.pow (2, bits)
    
#        my.value -= 
    endwhile
    return bits
endfunction

.#
.#  Resolve a enum's data type.
.#
function resolve_enum_type (enum)
    my.enum.namespace ?= ""
    my.enum.c_name = enum.namespace + "_" + enum.name

    #  If a literal value is provided count it's bits
    for my.enum.literal
        if defined (literal.value)
            my.enum.bits ?= 0
            bits = count_bits (literal.value)
            if (my.enum.bits < bits)
                my.enum.bits = bits
            endif
        endif
    endfor
    #  Else count the bits of the sum of literals
    my.enum.bits ?= count_bits (count (enum.literal))

    if my.enum.bits >= 32
        my.enum.type = "uint64_t"
        my.enum.enc_type = "uint64"
        my.enum.print_type = "\"PRIu64\""
        my.enum.size = 8
    elsif my.enum.bits >= 16
        my.enum.type = "uint32_t"
        my.enum.enc_type = "uint32"
        my.enum.print_type = "\"PRIu32\""
        my.enum.size = 4
    elsif my.enum.bits >= 8
        my.enum.type = "uint16_t"
        my.enum.enc_type = "uint16"
        my.enum.print_type = "\"PRIu16\""
        my.enum.size = 2
    else
        my.enum.type = "uint8_t"
        my.enum.enc_type = "uint8"
        my.enum.print_type = "\"PRIu8\""
        my.enum.size = 1
    endif
endfunction

.#
.#  Resolve a topics DDS data types to C data types for encoding of data. Also
.#  calculates the total size of a topic.
.#
function resolve_attribute_type (attribute)
    my.attribute.description ?= "$(string.trim (my.attribute.?""):left)"
    my.attribute.size ?= 1

    my.attribute.enc_type ?= ""
    my.attribute.print_type ?= ""
    if my.attribute.type = "DDS_short"
        my.attribute.enc_type = "int16"
        my.attribute.print_type = "\"PRId16\""
        my.attribute.size = 2
    elsif my.attribute.type = "DDS_long"
        my.attribute.enc_type = "int32"
        my.attribute.print_type = "\"PRId32\""
        my.attribute.size = 4
    elsif my.attribute.type = "DDS_long_long"
        my.attribute.enc_type = "int64"
        my.attribute.print_type = "\"PRId64\""
        my.attribute.size = 8
    elsif my.attribute.type = "DDS_unsigned_short"
        my.attribute.enc_type = "uint16"
        my.attribute.print_type = "\"PRIu16\""
        my.attribute.size = 2
    elsif my.attribute.type = "DDS_unsigned_long"
        my.attribute.enc_type = "uint32"
        my.attribute.print_type = "\"PRIu32\""
        my.attribute.size = 4
    elsif my.attribute.type = "DDS_unsigned_long_long"
        my.attribute.enc_type = "uint64"
        my.attribute.print_type = "\"PRIu64\""
        my.attribute.size = 8
    elsif my.attribute.type = "DDS_char"
        my.attribute.enc_type = "int8"
        my.attribute.print_type = "c"
    elsif my.attribute.type = "DDS_octet"
        my.attribute.enc_type = "uint8"
        my.attribute.print_type = "\"PRIu8\""
    elsif my.attribute.type = "DDS_boolean"
        my.attribute.enc_type = "bool"
        my.attribute.print_type = "d"
    elsif my.attribute.type = "DDS_string"
        my.attribute.type = "DDS_char"
        my.attribute.enc_type = "string"
        my.attribute.print_type = "s"
    else
        hit = 0
        # Check if type is an enum
        for project.enum where my.attribute.type = enum.name
            my.attribute.type = enum.c_name
            my.attribute.enc_type = enum.enc_type
            my.attribute.bits = enum.bits
            my.attribute.print_type = enum.print_type
            my.attribute.size = enum.size
            hit = 1
        endfor
        # Check if type is a struct
        for project.struct where my.attribute.type = struct.name
            my.attribute.type = struct.c_name
            my.attribute.enc_type = "struct"
            my.attribute.size = struct.size
            hit = 1
        endfor
        # Check if type is own datatype
        for project.datatype where my.attribute.type = datatype.name
            my.attribute.type = datatype.c_name
            my.attribute.enc_type = datatype.enc_type
            my.attribute.bits = datatype.bits
            my.attribute.print_type = datatype.print_type
            my.attribute.size = datatype.size
            hit = 1
        endfor
        if hit = 0
            echo "E: Invalid type '$(my.attribute.type)' for attribute '$(my.attribute.name)'"
        endif
    endif
    return my.attribute.size
endfunction

.#
.#  Resolve a structs DDS data types to C data types for encoding of data. Also
.#  calculates the total size of the struct.
.#
function resolve_struct (struct)
    for project.struct
        my.struct.size = 0
        for my.struct.attribute
            my.struct.c_name = "$(string.substr (my.struct.name, 0, 0):upper)" + "$(string.substr (my.struct.name, 1):Camel)"
            my.struct.size += resolve_attribute_type (attribute)
        endfor
    endfor
endfunction


function resolve_datatype (datatype)
    my.datatype.description ?= "$(string.trim (my.datatype.?""):left)"
    my.datatype.size ?= 1
    my.datatype.enc_type ?= ""
    my.datatype.print_type ?= ""
    my.datatype.namespace ?= ""
    my.datatype.c_name = datatype.namespace + "_" + datatype.name
    
    if my.datatype.type = "DDS_short"
        my.datatype.enc_type = "int16"
        my.datatype.print_type = "\"PRId16\""
        my.datatype.size = 2
        my.datatype.bits = 8 * 2
    elsif my.datatype.type = "DDS_long"
        my.datatype.enc_type = "int32"
        my.datatype.print_type = "\"PRId32\""
        my.datatype.size = 4
        my.datatype.bits = 8 * 4
    elsif my.datatype.type = "DDS_long_long"
        my.datatype.enc_type = "int64"
        my.datatype.print_type = "\"PRId64\""
        my.datatype.size = 8
        my.datatype.bits = 8 * 8
    elsif my.datatype.type = "DDS_unsigned_short"
        my.datatype.enc_type = "uint16"
        my.datatype.print_type = "\"PRIu16\""
        my.datatype.size = 2
        my.datatype.bits = 8 * 2
    elsif my.datatype.type = "DDS_unsigned_long"
        my.datatype.enc_type = "uint32"
        my.datatype.print_type = "\"PRIu32\""
        my.datatype.size = 4
        my.datatype.bits = 8*4
    elsif my.datatype.type = "DDS_unsigned_long_long"
        my.datatype.enc_type = "uint64"
        my.datatype.print_type = "\"PRIu64\""
        my.datatype.size = 8
        my.datatype.bits = 8*8
    elsif my.datatype.type = "DDS_char"
        my.datatype.enc_type = "int8"
        my.datatype.print_type = "c"
        my.datatype.bits = 8
    elsif my.datatype.type = "DDS_octet"
        my.datatype.enc_type = "uint8"
        my.datatype.print_type = "\"PRIu8\""
        my.datatype.bits = 8
    elsif my.datatype.type = "DDS_boolean"
        my.datatype.enc_type = "bool"
        my.datatype.print_type = "d"
        my.datatype.bits = 8
    elsif my.datatype.type = "DDS_string"
        my.datatype.type = "DDS_char"
        my.datatype.enc_type = "string"
        my.datatype.print_type = "s"
        
    else
        echo "E: Invalid type 2 '$(my.datatype.type)' for datatype '$(my.datatype.name)'"
    endif
    return my.datatype.size
    
.#      .enc_type
.#      .print_type = "\"PRIu8\""
.#      .bits
.#      .c_name
endfunction
.#
.#  Resolve a topics DDS data types to C data types for encoding of data. Also
.#  calculates the total size of a topic.
.#
function resolve_topic_type (topic)
    my.topic.size ?= 0
    my.topic.description ?= "$(string.trim (topic.?""):left)"
    my.topic.isPub = count (project.role, role.type = "publisher")
    my.topic.isSub = count (project.role, role.type = "subscriber")

    my.topic.c_name = "$(string.substr (my.topic.name, 0, 0):upper)" + "$(string.substr (my.topic.name, 1):Camel)"

    for my.topic.attribute
        my.topic.size += resolve_attribute_type (attribute)
        attribute.key ?= 0 
    endfor
endfunction

.#
.#  Resolves a topics configuration parameters.
.#
function resolve_topic_config (topic)
    for my.topic.config
        if config.type = "qos_reliability"
            config.reliabilityKind ?= ""

            if reliabilitySeqnrSize = "basic"
                my.topic.qos_seqNrBitSize = 4
                config.qos_seqNrBitSize = 4
                if project.qos_reliability_biggest_seqNr_bitsize < 4
                    project.qos_reliability_biggest_seqNr_bitsize = 4
                endif
            elsif reliabilitySeqnrSize = "small"
                my.topic.qos_seqNrBitSize = "8"
                config.qos_seqNrBitSize = "8"
                if project.qos_reliability_biggest_seqNr_bitsize < 8
                    project.qos_reliability_biggest_seqNr_bitsize = 8
                endif
            elsif reliabilitySeqnrSize = "big"
                my.topic.qos_seqNrBitSize = "16"
                config.qos_seqNrBitSize = "16"
                if project.qos_reliability_biggest_seqNr_bitsize < 16
                    project.qos_reliability_biggest_seqNr_bitsize = 16
                endif
            elsif reliabilitySeqnrSize = "huge"
                my.topic.qos_seqNrBitSize = 32
                config.qos_seqNrBitSize = 32
                project.qos_reliability_biggest_seqNr_bitsize = 32
            endif

            if kind = "besteffort"
                project.qos_reliability_has_kind_besteffort = 1
                my.topic.qos_reliability_kind = 1
            elsif kind = "reliable"
                my.topic.qos_reliability_kind = 2
                my.topic.qos_reliability_max_blocking_time = max_blocking_time
                if max_blocking_time > project.qos_reliability_biggest_max_blocking_time
                    project.qos_reliability_biggest_max_blocking_time = max_blocking_time
                endif
                if confirmationtype = "ack"
                    project.qos_reliability_has_kind_reliableAck = 1
                    my.topic.qos_reliability_confirmationtype = 1
                elsif confirmationtype = "nack"
                    project.qos_reliability_has_kind_reliableNack = 1
                    my.topic.qos_reliability_confirmationtype = 2
                endif
            endif
        elsif config.type = "qos_history"
            config.depth ?= "1"
            my.topic.history_depth = config.depth
        elsif config.type = "security"
            
        else
            echo "E: Invalid config '$(config.type)' in topic $(topic.name:)"
        endif
    endfor
endfunction

function print_encode_attribute (attribute, parent)
    if my.attribute.enc_type = "string"
>    Marshalling_enc_$(my.attribute.enc_type)(start + *size, $(my.parent:)->$(my.attribute.name:c), $(my.attribute.size));
    else
        if defined (my.attribute.bits)
>    $(my.attribute.enc_type)_t $(my.attribute.name:c)_tmp = $(my.parent:)->$(my.attribute.name:c);
>    Marshalling_enc_$(my.attribute.enc_type)(start + *size, &$(my.attribute.name:c)_tmp);
        else
>    Marshalling_enc_$(my.attribute.enc_type)(start + *size, &$(my.parent:)->$(my.attribute.name:c));
        endif
    endif
    if defined (my.attribute.bits)
>    *size += $(my.attribute.size);
    else
>    *size += sizeof($(my.parent:)->$(my.attribute.name:c));
    endif
endfunction

function print_decode_attribute (attribute, parent)
    if my.attribute.enc_type = "string"
>    Marshalling_dec_$(my.attribute.enc_type)(start + *size, $(my.parent:)->$(my.attribute.name:c), $(my.attribute.size));
    else
        if defined (my.attribute.bits)
>    $(my.attribute.enc_type)_t $(my.attribute.name:c)_tmp;
>    Marshalling_dec_$(my.attribute.enc_type)(start + *size, &$(my.attribute.name:c)_tmp);
>    $(my.parent:)->$(my.attribute.name:c) = $(my.attribute.name:c)_tmp;
        else
>    Marshalling_dec_$(my.attribute.enc_type)(start + *size, &$(my.parent:)->$(my.attribute.name:c));
        endif
    endif
    if defined (my.attribute.bits)
>    *size += $(my.attribute.size);
    else
>    *size += sizeof($(my.parent:)->$(my.attribute.name:c));
    endif
endfunction

project.qos_reliability_has_kind_besteffort ?= 0
project.qos_reliability_has_kind_reliableAck ?= 0
project.qos_reliability_has_kind_reliableNack ?= 0
project.qos_reliability_biggest_seqNr_bitsize ?= 0
project.qos_reliability_biggest_max_blocking_time ?= 0


for project.enum
    resolve_enum_type (enum)
endfor
for project.datatype
    resolve_datatype (datatype)
endfor
for project.struct
    resolve_struct (struct)
endfor
for project.topic
    resolve_topic_type (topic)

    resolve_topic_config (topic)
endfor

.endtemplate
.#
.#  Generate profile header
.#
.echo "Generating sdds_profile.h ..."
.output "sdds_profile.h"
/*  =========================================================================
    sdds_profile.h - Contains enums and structs defined by all profiles

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

$(project.GENERATED_WARNING_HEADER:)
    =========================================================================
*/
#ifndef PROFILE_H_INC
#define PROFILE_H_INC

.   for project.enum
// $(string.trim (enum.?""):left)
typedef $(enum.type:) $(enum.c_name:);
.       literal_value = 0
.       for enum.literal
.           if defined (literal.value)
#define $(Enum.C_name:c)_$(LITERAL.NAME:c) $(literal.value)
.           else
#define $(Enum.C_name:c)_$(LITERAL.NAME:c) $(literal_value)
.           endif
.       literal_value += 1
.       endfor

.   endfor

.   for project.datatype
typedef $(datatype.type:) $(datatype.c_name:);
.   endfor

.   for struct
struct $(struct.c_name:)
{
.       for struct.attribute
    /* $(attribute.description:) */
.           if attribute.enc_type = "string"
    $(attribute.type:) $(attribute.name:c)[$(attribute.size + 1)];
.           elsif defined (attribute.bits)
.               if attribute.bits < 8
    $(attribute.type:) $(attribute.name:c) : $(attribute.bits);
.               else
    $(attribute.type:) $(attribute.name:c);
.               endif
.           else
    $(attribute.type:) $(attribute.name:c);
.           endif
.   endfor
};
typedef struct $(struct.c_name:) $(struct.c_name:);

.   endfor
#endif
.close
.for project.topic
.#
.#  Generate topic ds header
.#
.   echo "Generating $(topic.c_name)-ds.h ..."
.   output "$(topic.c_name)-ds.h"
/*  =========================================================================
    $(topic.c_name:) - $(topic.description:)

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

$(project.GENERATED_WARNING_HEADER:)
    =========================================================================
*/
#ifndef $(TOPIC.NAME)_H_INC
#define $(TOPIC.NAME)_H_INC

#include <sdds/sDDS.h>
#include "sdds_profile.h"
#include "List.h"

struct $(topic.c_name:)
{
.   for topic.attribute
    /* $(attribute.description:) */
.       if attribute.key <> 0
    union {
.           if attribute.enc_type = "string"
.               if attribute.key = "primary"
        $(attribute.type:) pkey[$(attribute.size + 1)];
.               elsif attribute.key = "secondary"
        $(attribute.type:) skey[$(attribute.size + 1)];
.               endif
        $(attribute.type:) $(attribute.name:c)[$(attribute.size + 1)];
.           elsif defined (attribute.bits)
.               if attribute.bits < 8
.                   if attribute.key = "primary"
        $(attribute.type:) pkey : $(attribute.bits);
.                   elsif attribute.key = "secondary"
        $(attribute.type:) skey : $(attribute.bits);
.                   endif
        $(attribute.type:) $(attribute.name:c) : $(attribute.bits);
.               else
.                   if attribute.key = "primary"
        $(attribute.type:) pkey;
.                   elsif attribute.key = "secondary"
        $(attribute.type:) skey;
.                   endif
        $(attribute.type:) $(attribute.name:c);
.               endif
.           else
.               if attribute.key = "primary"
        $(attribute.type:) pkey;
.               elsif attribute.key = "secondary"
        $(attribute.type:) skey;
.               endif
        $(attribute.type:) $(attribute.name:c);
.           endif
    };
.       else
.           if attribute.enc_type = "string"
    $(attribute.type:) $(attribute.name:c)[$(attribute.size + 1)];
.           elsif defined (attribute.bits)
.               if attribute.bits < 8
    $(attribute.type:) $(attribute.name:c) : $(attribute.bits);
.               else
    $(attribute.type:) $(attribute.name:c);
.               endif
.           else
    $(attribute.type:) $(attribute.name:c);
.           endif
.       endif
.   endfor
};
typedef struct $(topic.c_name:) $(topic.c_name:);


DDS_ReturnCode_t
$(topic.c_name:)_init();

#ifdef SDDS_TOPIC_HAS_PUB
DDS_ReturnCode_t DDS_$(topic.c_name:)DataReader_take_next_sample(
    DDS_DataReader _this,
    $(topic.c_name:)** values,
    DDS_SampleInfo* sample_info
);

#endif

#ifdef SDDS_TOPIC_HAS_SUB
DDS_ReturnCode_t DDS_$(topic.c_name:)DataWriter_write(
    DDS_DataWriter _this,
    const $(topic.c_name:)* instance_data,
    const DDS_InstanceHandle_t handle
);
#endif

Topic_t * sDDS_$(topic.c_name:)Topic_create($(topic.c_name:)* pool, int count);

#endif
/*
$(project.GENERATED_WARNING_HEADER:)
*/
.close
.#
.#  Generate topic sources
.#
.   echo "Generating $(topic.c_name)-ds.c ..."
.   output "$(topic.c_name)-ds.c"
/*  =========================================================================
    $(topic.c_name:) - $(topic.description:)

.       for project.license
    $(string.trim (license.):block                                         )
.       endfor

$(project.GENERATED_WARNING_HEADER:)
    =========================================================================
*/
#ifdef __cplusplus
extern "C"
{
#endif

#include "$(topic.c_name)-ds.h"

#include <stdio.h>
#include <string.h>

.if project.os = "autobest"
#include <hv.h>
#include <dds_obj_ids.h>
#include <app.id.h>
.if project.autobest_role = "client"
#include "$(project.name:c)_shm.h"
.endif
.endif

#ifdef __cplusplus
}
#endif

#define SDDS_DOMAIN 0x$(topic.domain)
#define SDDS_TOPIC 0x$(topic.id)

.   if project.os <> "autobest" | (defined (project.autobest_role) & project.autobest_role = "server")
.       if topic.isSub
.           if defined (topic.history_depth)
Sample_t $(topic.c_name)_samples_pool[$(topic.history_depth)];
static $(topic.c_name:) $(topic.c_name)_sample_data[$(topic.history_depth)];
.           else
Sample_t $(topic.c_name)_samples_pool[SDDS_QOS_HISTORY_DEPTH];
static $(topic.c_name:) $(topic.c_name)_sample_data[SDDS_QOS_HISTORY_DEPTH];
.           endif
static $(topic.c_name:) $(topic.c_name)_incomingSample_data;
.       endif
.       if topic.isPub
#if defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_NACK)
ReliableSample_t $(topic.c_name)_reliableSamples_pool[SDDS_QOS_RELIABILITY_RELIABLE_SAMPLES_SIZE];
static $(topic.c_name:) $(topic.c_name)_reliableSamples_data[SDDS_QOS_RELIABILITY_RELIABLE_SAMPLES_SIZE];
#endif
.       endif
.   endif


.if project.os <> "autobest" | (defined (project.autobest_role) & project.autobest_role = "server")
rc_t TopicMarshalling_$(topic.c_name:)_cpy(Data dest, Data source);

DDS_ReturnCode_t
$(topic.c_name:)_init()
{
   int index;
.   if topic.isSub
.       if defined (topic.history_depth)
   for (index = 0; index < $(topic.history_depth); index++) {
.       else
   for (index = 0; index < SDDS_QOS_HISTORY_DEPTH; index++) {
.       endif
      $(topic.c_name)_samples_pool[index].data = &$(topic.c_name)_sample_data[index];
   }
.   endif
.   if topic.isPub
#if defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_NACK)
for (index = 0; index < SDDS_QOS_RELIABILITY_RELIABLE_SAMPLES_SIZE; index++) {
   $(topic.c_name)_reliableSamples_pool[index].data = &$(topic.c_name)_reliableSamples_data[index];
}
#endif
.   endif
}

#if defined (SDDS_TOPIC_HAS_PUB)

rc_t TopicMarshalling_$(topic.c_name:)_decode(NetBuffRef_t* buffer, Data data, size_t* size);

DDS_ReturnCode_t DDS_$(topic.c_name:)DataReader_take_next_sample(
    DDS_DataReader self,
    $(topic.c_name:)** data_values,
    DDS_SampleInfo* sample_info
)
{
    rc_t ret = DataReader_take_next_sample((DataReader_t *) self, (Data*) data_values, (DataInfo) sample_info);

    if (ret == SDDS_RT_NODATA)
        return DDS_RETCODE_NO_DATA;

    if (ret == SDDS_RT_OK)
        return DDS_RETCODE_OK;

    return DDS_RETCODE_ERROR;
}

#endif

#if defined (SDDS_TOPIC_HAS_SUB) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_NACK)

rc_t TopicMarshalling_$(topic.c_name:)_encode(NetBuffRef_t* buffer, Data data, size_t* size);

DDS_ReturnCode_t DDS_$(topic.c_name:)DataWriter_write(
    DDS_DataWriter _this,
    const $(topic.c_name:)* instance_data,
    const DDS_InstanceHandle_t  handle
)
{
	rc_t ret = DataWriter_write((DataWriter_t *) _this, (Data)instance_data, (void*) handle);

    if ((ret == SDDS_RT_OK) || (ret == SDDS_RT_DEFERRED)) {
#ifdef TEST_SCALABILITY_RIOT
        fprintf(stderr,"{SCL:D}\\n");
#endif
		return DDS_RETCODE_OK;
    }
    else if (ret == SDDS_RT_NO_SUB) {
	    return DDS_RETCODE_OK;
    }

	return DDS_RETCODE_ERROR;
}
#endif

rc_t TopicMarshalling_$(topic.c_name:)_cmpPrimaryKeys(Data data1, Data data2);

void*
TopicMarshalling_$(topic.c_name:)_getPrimaryKey(Data data);

void*
TopicMarshalling_$(topic.c_name:)_getSecondaryKey(Data data);

Topic_t * sDDS_$(topic.c_name:)Topic_create($(topic.c_name:)* pool, int count)
{
	Topic_t *topic = TopicDB_createTopic();
    assert (topic!=NULL);
#if defined (SDDS_TOPIC_HAS_SUB) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK) || defined (SDDS_HAS_QOS_RELIABILITY_KIND_RELIABLE_ACK)
	topic->Data_encode = TopicMarshalling_$(topic.c_name:)_encode;
	topic->dsinks.list = List_initConcurrentLinkedList();
    if(topic->dsinks.list == NULL){
        return NULL;
    }
#endif

#ifdef SDDS_TOPIC_HAS_PUB 
    topic->incomingSample.data = &$(topic.c_name)_incomingSample_data; 
	topic->Data_decode = TopicMarshalling_$(topic.c_name:)_decode;
	topic->dsources.list = List_initConcurrentLinkedList();
    if(topic->dsources.list == NULL){
        return NULL;
    }
#endif

	topic->domain = SDDS_DOMAIN;
	topic->id = SDDS_TOPIC;
	topic->Data_cpy = TopicMarshalling_$(topic.c_name:)_cpy;
    topic->Data_cmpPrimaryKeys = TopicMarshalling_$(topic.c_name:)_cmpPrimaryKeys;
    topic->Data_getPrimaryKey = TopicMarshalling_$(topic.c_name:)_getPrimaryKey;
    topic->Data_getSecondaryKey = TopicMarshalling_$(topic.c_name:)_getSecondaryKey;

.   for topic.config
.       if config.type = "qos_reliability"
#ifdef SDDS_HAS_QOS_RELIABILITY
topic->seqNrBitSize = $(topic.qos_seqNrBitSize:);
topic->reliabilityKind = $(topic.qos_reliability_kind:);
.           if topic.qos_reliability_kind = "2"
topic->confirmationtype = $(topic.qos_reliability_confirmationtype:);
topic->max_blocking_time = $(topic.qos_reliability_max_blocking_time:);
.           endif
#endif
.       endif
.   endfor


.   for topic.config
.      if config.type = "security"
#ifdef FEATURE_SDDS_SECURITY_ENABLED
.        if config.data_protection_kind = "ENCRYPT"
topic->protection = 1;
.       else 
topic->protection = 0;
.        endif
#endif
.      endif
.   endfor

	return topic;
}

rc_t TopicMarshalling_$(topic.c_name:)_cpy(Data dest, Data source)
{
	memcpy(dest, source, sizeof($(topic.c_name:)));

	return SDDS_RT_OK;
}

rc_t TopicMarshalling_$(topic.c_name:)_encode(NetBuffRef_t* buffer, Data data, size_t* size)
{
	*size = 0;
  byte_t* start;

	$(topic.c_name:)* real_data = ($(topic.c_name:)*) data;

	start = buffer->buff_start + buffer->curPos + 1;

.   for topic.config
.      if config.type = "security"
.        if config.data_protection_kind = "ENCRYPT"
	start = buffer->buff_start + buffer->curPos + 2;
.        endif
.      endif
.   endfor

	int maxSize = 0;
.   for topic.attribute
.       if defined (attribute.bits)
    maxSize += $(attribute.size);
.       else
    maxSize += sizeof(real_data->$(attribute.name:c));
.       endif
.   endfor

	if ((buffer->curPos + maxSize + 1) >= SDDS_NET_MAX_BUF_SIZE) {
		return SDDS_RT_FAIL;
	}

.   for topic.attribute
.       if attribute.enc_type = "struct"
.           for project.struct where attribute.type = struct.c_name
.               parent = "$(attribute.name:c)"
    $(struct.c_name:)* $(attribute.name:c) = &real_data->$(attribute.name:c);
.               for struct.attribute
.                   print_encode_attribute (attribute, parent)
.               endfor
.           endfor
.       else
.           print_encode_attribute (attribute, "real_data")
.       endif
.   endfor

	return SDDS_RT_OK;
}

rc_t TopicMarshalling_$(topic.c_name:)_decode(NetBuffRef_t* buffer, Data data, size_t* size)
{
	if (*size != $(topic.size))
		Log_debug ("size mismatch is %zu should be $(size)\\n", *size);

	*size = 0;

	byte_t* start = buffer->buff_start + buffer->curPos;

	$(topic.c_name:)* real_data = ($(topic.c_name:)*) data;

.   for topic.attribute
.       if attribute.enc_type = "struct"
.           for project.struct where attribute.type = struct.c_name
.               parent = "$(attribute.name:c)"
    $(struct.c_name:)* $(attribute.name:c) = &real_data->$(attribute.name:c);
.               for struct.attribute
.                   print_decode_attribute (attribute, parent)
.               endfor
.           endfor
.       else
.           print_decode_attribute (attribute, "real_data")
.       endif
.   endfor

	return SDDS_RT_OK;
}

void*
TopicMarshalling_$(topic.c_name:)_getPrimaryKey(Data data) {
    $(topic.c_name:)* real_data = ($(topic.c_name:)*) data;
    
.   for topic.attribute
.       if attribute.key = "primary"
    return (void*) &real_data->pkey;
.       else
    return NULL;
.       endif
.   endfor
}

void*
TopicMarshalling_$(topic.c_name:)_getSecondaryKey(Data data) {
    assert(data);
    $(topic.c_name:)* real_data = ($(topic.c_name:)*) data;
    
.   for topic.attribute
.       if attribute.key = "secondary"
    return (void*) &real_data->skey;
.       endif
.   endfor

    return NULL;
}

rc_t TopicMarshalling_$(topic.c_name:)_cmpPrimaryKeys(Data data1, Data data2) {
	$(topic.c_name:)* real_data1 = ($(topic.c_name:)*) data1;
	$(topic.c_name:)* real_data2 = ($(topic.c_name:)*) data2;

.   for topic.attribute
.       if attribute.key = "primary"
.           if attribute.enc_type = "string"
    if (strcmp(real_data1->pkey, real_data2->pkey) == 0) {
        return SDDS_RT_OK;
    } 
.           else
    if (real_data1->pkey == real_data2->pkey) {
        return SDDS_RT_OK;
    }
.           endif
.       endif
.   endfor
    return SDDS_RT_FAIL;
}

/*
$(project.GENERATED_WARNING_HEADER:)
*/
.else
// Generate stub's for the autobest client
#ifdef SDDS_TOPIC_HAS_PUB
DDS_ReturnCode_t DDS_$(topic.c_name:)DataReader_take_next_sample(
    DDS_DataReader self,
    $(topic.c_name:)** data_values,
    DDS_SampleInfo* sample_info
){
    unsigned int err;
    unsigned long recv_arg;
    // setting up the shm...
    g_shm_$(project.name:c)->$(topic.name:c)_seg.type = 0;
#ifdef FEATURE_SDDS_TRACING_ENABLED
#ifdef FEATURE_SDDS_TRACING_RECV_ISOLATED
#ifdef FEATURE_SDDS_TRACING_RPC_CALL
    Trace_point(SDDS_TRACE_EVENT_RPC_CALL);
#endif
#endif
#endif
    err = sys_rpc_call(CFG_RPC_rpc_sdds_$(project.name:c),DDS_$(topic.NAME)_READER_ID,-1, &recv_arg);
    assert(err ==  E_OK);
    $(topic.c_name:)* addr = *data_values;
    *addr = g_shm_$(project.name:c)->$(topic.name:c)_seg.data;
    return (DDS_ReturnCode_t) recv_arg;
}
#endif

#ifdef SDDS_TOPIC_HAS_SUB
DDS_ReturnCode_t DDS_$(topic.c_name:)DataWriter_write(
    DDS_DataWriter _this,
    const $(topic.c_name:)* instance_data,
    const DDS_InstanceHandle_t  handle

){
    g_shm_$(project.name:c)->$(topic.name:c)_seg.type = 1;
    memcpy(&g_shm_$(project.name:c)->$(topic.name:c)_seg.data, instance_data, sizeof($(topic.c_name:)));
    unsigned int err;
    unsigned long recv_arg;
#ifdef FEATURE_SDDS_TRACING_ENABLED
#ifdef FEATURE_SDDS_TRACING_SEND_ISOLATED
#ifdef FEATURE_SDDS_TRACING_RPC_CALL
    Trace_point(SDDS_TRACE_EVENT_RPC_CALL);
#endif
#endif
#endif
    err = sys_rpc_call(CFG_RPC_rpc_sdds_$(project.name:c), DDS_$(topic.NAME)_WRITER_ID,-1, &recv_arg);
    assert(err ==  E_OK);
    return (DDS_ReturnCode_t) recv_arg;
}
#endif
.endif
.   close
.endfor
